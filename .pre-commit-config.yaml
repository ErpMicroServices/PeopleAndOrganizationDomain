# See https://pre-commit.com for more information
# See https://pre-commit.com/hooks.html for more hooks
default_language_version:
  python: python3
repos:
  # General file checks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v5.0.0
    hooks:
      - id: trailing-whitespace
      - id: end-of-file-fixer
      - id: check-yaml
      - id: check-added-large-files
        args: ['--maxkb=1000']
      - id: check-merge-conflict
      - id: check-case-conflict
      - id: check-json
      - id: check-xml
      - id: mixed-line-ending
        args: ['--fix=lf']

  # Secrets detection
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.4.0
    hooks:
      - id: detect-secrets
        args: ['--baseline', '.secrets.baseline']
        exclude: package-lock\.json|yarn\.lock|gradle\.lockfile

  # Java/Gradle checks - Only compile check on every commit
  - repo: local
    hooks:
      # Compile Java code (fast, runs on every commit)
      - id: gradle-compile
        name: Gradle Compile
        entry: |
          # Cross-platform Java 21 detection and setup
          echo "üîç Detecting Java 21 for compilation..."

          # Function to check if Java version is 21
          check_java_version() {
            if [ -n "$1" ] && [ -x "$1/bin/java" ]; then
              version=$("$1/bin/java" -version 2>&1 | head -n 1 | cut -d\" -f2 | cut -d. -f1)
              if [ "$version" = "21" ]; then
                return 0
              fi
            fi
            return 1
          }

          # Try different methods to find Java 21
          JAVA21_HOME=""

          # Method 1: Check if current JAVA_HOME is Java 21
          if check_java_version "$JAVA_HOME"; then
            JAVA21_HOME="$JAVA_HOME"
            echo "‚úÖ Using current JAVA_HOME: $JAVA_HOME"

          # Method 2: macOS - use java_home utility
          elif command -v /usr/libexec/java_home >/dev/null 2>&1; then
            if TEMP_JAVA_HOME=$(/usr/libexec/java_home -v 21 2>/dev/null); then
              if check_java_version "$TEMP_JAVA_HOME"; then
                JAVA21_HOME="$TEMP_JAVA_HOME"
                echo "‚úÖ Found Java 21 via macOS java_home: $JAVA21_HOME"
              fi
            fi

          # Method 3: Check common Java installation locations
          else
            for java_path in \
              "/usr/lib/jvm/java-21-openjdk" \
              "/usr/lib/jvm/java-21-oracle" \
              "/usr/lib/jvm/temurin-21-jdk" \
              "/opt/java/openjdk-21" \
              "/usr/java/jdk-21" \
              "/Library/Java/JavaVirtualMachines/*/Contents/Home" \
              "$HOME/.sdkman/candidates/java/21.*" \
              "$HOME/.jenv/versions/21.*"; do

              # Handle glob patterns
              for expanded_path in $java_path; do
                if check_java_version "$expanded_path"; then
                  JAVA21_HOME="$expanded_path"
                  echo "‚úÖ Found Java 21 at: $JAVA21_HOME"
                  break 2
                fi
              done
            done
          fi

          # If Java 21 not found, provide helpful error message
          if [ -z "$JAVA21_HOME" ]; then
            echo "‚ùå ERROR: Java 21 is required for compilation but was not found."
            echo ""
            echo "üìã Please install Java 21 using one of these methods:"
            echo ""
            echo "üçé macOS:"
            echo "   brew install openjdk@21"
            echo "   # or download from: https://adoptium.net/temurin/releases/"
            echo ""
            echo "üêß Linux (Ubuntu/Debian):"
            echo "   sudo apt update && sudo apt install openjdk-21-jdk"
            echo ""
            echo "üêß Linux (RHEL/CentOS):"
            echo "   sudo yum install java-21-openjdk-devel"
            echo ""
            echo "ü™ü Windows:"
            echo "   Download from: https://adoptium.net/temurin/releases/"
            echo "   Or use: winget install EclipseFoundation.Temurin.21.JDK"
            echo ""
            echo "üîß Alternative: Use SDKMAN (cross-platform):"
            echo "   curl -s \"https://get.sdkman.io\" | bash"
            echo "   source ~/.sdkman/bin/sdkman-init.sh"
            echo "   sdk install java 21-tem"
            echo ""
            echo "üí° After installation, ensure Java 21 is in your PATH or set JAVA_HOME"
            echo "   Example: export JAVA_HOME=/path/to/java-21"
            echo ""
            echo "üö´ To bypass this check temporarily: git commit --no-verify"
            exit 1
          fi

          # Set JAVA_HOME and compile
          export JAVA_HOME="$JAVA21_HOME"
          echo "üöÄ Compiling with Java 21..."
          ./gradlew compileJava compileTestJava --no-daemon
        language: system
        files: \.java$
        pass_filenames: false

  # JavaScript/React checks
  - repo: local
    hooks:
      # ESLint
      - id: eslint
        name: ESLint
        entry: bash -c 'cd ui-components && npm run lint'
        language: system
        files: \.(js|jsx|ts|tsx)$
        pass_filenames: false

  # YAML validation
  - repo: https://github.com/adrienverge/yamllint
    rev: v1.35.1
    hooks:
      - id: yamllint
        args: ['-c', '.yamllint.yml']

  # Markdown formatting (disabled temporarily - too many legacy issues)
  # - repo: https://github.com/igorshubovych/markdownlint-cli
  #   rev: v0.42.0
  #   hooks:
  #     - id: markdownlint
  #       args: ['--fix']

  # Commit message validation
  - repo: https://github.com/commitizen-tools/commitizen
    rev: v4.0.0
    hooks:
      - id: commitizen
        stages: [commit-msg]

# Pre-push hooks (more expensive checks)
  - repo: local
    hooks:
      # Run unit tests before push
      - id: gradle-test-push
        name: Gradle Unit Tests (pre-push)
        entry: |
          # Cross-platform Java 21 detection and setup
          echo "üîç Detecting Java 21 for unit tests..."

          # Function to check if Java version is 21
          check_java_version() {
            if [ -n "$1" ] && [ -x "$1/bin/java" ]; then
              version=$("$1/bin/java" -version 2>&1 | head -n 1 | cut -d\" -f2 | cut -d. -f1)
              if [ "$version" = "21" ]; then
                return 0
              fi
            fi
            return 1
          }

          # Try different methods to find Java 21
          JAVA21_HOME=""

          # Method 1: Check if current JAVA_HOME is Java 21
          if check_java_version "$JAVA_HOME"; then
            JAVA21_HOME="$JAVA_HOME"
            echo "‚úÖ Using current JAVA_HOME: $JAVA_HOME"

          # Method 2: macOS - use java_home utility
          elif command -v /usr/libexec/java_home >/dev/null 2>&1; then
            if TEMP_JAVA_HOME=$(/usr/libexec/java_home -v 21 2>/dev/null); then
              if check_java_version "$TEMP_JAVA_HOME"; then
                JAVA21_HOME="$TEMP_JAVA_HOME"
                echo "‚úÖ Found Java 21 via macOS java_home: $JAVA21_HOME"
              fi
            fi

          # Method 3: Check common Java installation locations
          else
            for java_path in \
              "/usr/lib/jvm/java-21-openjdk" \
              "/usr/lib/jvm/java-21-oracle" \
              "/usr/lib/jvm/temurin-21-jdk" \
              "/opt/java/openjdk-21" \
              "/usr/java/jdk-21" \
              "/Library/Java/JavaVirtualMachines/*/Contents/Home" \
              "$HOME/.sdkman/candidates/java/21.*" \
              "$HOME/.jenv/versions/21.*"; do

              # Handle glob patterns
              for expanded_path in $java_path; do
                if check_java_version "$expanded_path"; then
                  JAVA21_HOME="$expanded_path"
                  echo "‚úÖ Found Java 21 at: $JAVA21_HOME"
                  break 2
                fi
              done
            done
          fi

          # If Java 21 not found, provide helpful error message
          if [ -z "$JAVA21_HOME" ]; then
            echo "‚ùå ERROR: Java 21 is required for unit tests but was not found."
            echo ""
            echo "üìã Please install Java 21 using one of these methods:"
            echo ""
            echo "üçé macOS:"
            echo "   brew install openjdk@21"
            echo "   # or download from: https://adoptium.net/temurin/releases/"
            echo ""
            echo "üêß Linux (Ubuntu/Debian):"
            echo "   sudo apt update && sudo apt install openjdk-21-jdk"
            echo ""
            echo "üêß Linux (RHEL/CentOS):"
            echo "   sudo yum install java-21-openjdk-devel"
            echo ""
            echo "ü™ü Windows:"
            echo "   Download from: https://adoptium.net/temurin/releases/"
            echo "   Or use: winget install EclipseFoundation.Temurin.21.JDK"
            echo ""
            echo "üîß Alternative: Use SDKMAN (cross-platform):"
            echo "   curl -s \"https://get.sdkman.io\" | bash"
            echo "   source ~/.sdkman/bin/sdkman-init.sh"
            echo "   sdk install java 21-tem"
            echo ""
            echo "üí° After installation, ensure Java 21 is in your PATH or set JAVA_HOME"
            echo "   Example: export JAVA_HOME=/path/to/java-21"
            echo ""
            echo "üö´ To bypass this check temporarily: git push --no-verify"
            exit 1
          fi

          # Set JAVA_HOME and run tests
          export JAVA_HOME="$JAVA21_HOME"
          echo "üöÄ Running unit tests with Java 21..."
          ./gradlew test -x integrationTest --no-daemon
        language: system
        files: \.java$
        pass_filenames: false
        stages: [pre-push]

      # Run integration tests before push
      - id: gradle-integration-tests-push
        name: Gradle Integration Tests (pre-push)
        entry: |
          # Cross-platform Java 21 detection and setup
          echo "üîç Detecting Java 21 for integration tests..."

          # Function to check if Java version is 21
          check_java_version() {
            if [ -n "$1" ] && [ -x "$1/bin/java" ]; then
              version=$("$1/bin/java" -version 2>&1 | head -n 1 | cut -d\" -f2 | cut -d. -f1)
              if [ "$version" = "21" ]; then
                return 0
              fi
            fi
            return 1
          }

          # Try different methods to find Java 21
          JAVA21_HOME=""

          # Method 1: Check if current JAVA_HOME is Java 21
          if check_java_version "$JAVA_HOME"; then
            JAVA21_HOME="$JAVA_HOME"
            echo "‚úÖ Using current JAVA_HOME: $JAVA_HOME"

          # Method 2: macOS - use java_home utility
          elif command -v /usr/libexec/java_home >/dev/null 2>&1; then
            if TEMP_JAVA_HOME=$(/usr/libexec/java_home -v 21 2>/dev/null); then
              if check_java_version "$TEMP_JAVA_HOME"; then
                JAVA21_HOME="$TEMP_JAVA_HOME"
                echo "‚úÖ Found Java 21 via macOS java_home: $JAVA21_HOME"
              fi
            fi

          # Method 3: Check common Java installation locations
          else
            for java_path in \
              "/usr/lib/jvm/java-21-openjdk" \
              "/usr/lib/jvm/java-21-oracle" \
              "/usr/lib/jvm/temurin-21-jdk" \
              "/opt/java/openjdk-21" \
              "/usr/java/jdk-21" \
              "/Library/Java/JavaVirtualMachines/*/Contents/Home" \
              "$HOME/.sdkman/candidates/java/21.*" \
              "$HOME/.jenv/versions/21.*"; do

              # Handle glob patterns
              for expanded_path in $java_path; do
                if check_java_version "$expanded_path"; then
                  JAVA21_HOME="$expanded_path"
                  echo "‚úÖ Found Java 21 at: $JAVA21_HOME"
                  break 2
                fi
              done
            done
          fi

          # If Java 21 not found, provide helpful error message
          if [ -z "$JAVA21_HOME" ]; then
            echo "‚ùå ERROR: Java 21 is required for integration tests but was not found."
            echo ""
            echo "üìã Please install Java 21 using one of these methods:"
            echo ""
            echo "üçé macOS:"
            echo "   brew install openjdk@21"
            echo "   # or download from: https://adoptium.net/temurin/releases/"
            echo ""
            echo "üêß Linux (Ubuntu/Debian):"
            echo "   sudo apt update && sudo apt install openjdk-21-jdk"
            echo ""
            echo "üêß Linux (RHEL/CentOS):"
            echo "   sudo yum install java-21-openjdk-devel"
            echo ""
            echo "ü™ü Windows:"
            echo "   Download from: https://adoptium.net/temurin/releases/"
            echo "   Or use: winget install EclipseFoundation.Temurin.21.JDK"
            echo ""
            echo "üîß Alternative: Use SDKMAN (cross-platform):"
            echo "   curl -s \"https://get.sdkman.io\" | bash"
            echo "   source ~/.sdkman/bin/sdkman-init.sh"
            echo "   sdk install java 21-tem"
            echo ""
            echo "üí° After installation, ensure Java 21 is in your PATH or set JAVA_HOME"
            echo "   Example: export JAVA_HOME=/path/to/java-21"
            echo ""
            echo "üö´ To bypass this check temporarily: git push --no-verify"
            exit 1
          fi

          # Set JAVA_HOME and run integration tests
          export JAVA_HOME="$JAVA21_HOME"
          echo "üöÄ Running integration tests with Java 21..."
          echo "‚è±Ô∏è  This may take a few minutes as tests use Testcontainers for PostgreSQL..."
          echo ""

          # Check if Docker is running (required for Testcontainers)
          if ! docker info >/dev/null 2>&1; then
            echo "‚ùå ERROR: Docker is not running!"
            echo "Integration tests require Docker for Testcontainers."
            echo ""
            echo "Please start Docker and try again."
            echo "üö´ To bypass this check temporarily: git push --no-verify"
            exit 1
          fi

          # Run integration tests with a timeout
          timeout 300 ./gradlew integrationTest --no-daemon || {
            exit_code=$?
            if [ $exit_code -eq 124 ]; then
              echo ""
              echo "‚ùå ERROR: Integration tests timed out after 5 minutes!"
              echo "This might indicate a problem with the tests or database connection."
            else
              echo ""
              echo "‚ùå ERROR: Integration tests failed!"
            fi
            echo ""
            echo "üí° Tips:"
            echo "  - Check test output above for specific failures"
            echo "  - Ensure Docker is running for Testcontainers"
            echo "  - Run './gradlew integrationTest' locally to debug"
            echo ""
            echo "üö´ To bypass this check temporarily: git push --no-verify"
            exit $exit_code
          }

          echo ""
          echo "‚úÖ Integration tests passed!"
        language: system
        files: \.java$
        pass_filenames: false
        stages: [pre-push]
        always_run: true

      # Run code quality checks before push
      - id: gradle-quality-push
        name: Gradle Code Quality (pre-push)
        entry: |
          # Cross-platform Java 21 detection and setup
          echo "üîç Detecting Java 21 for code quality checks..."

          # Function to check if Java version is 21
          check_java_version() {
            if [ -n "$1" ] && [ -x "$1/bin/java" ]; then
              version=$("$1/bin/java" -version 2>&1 | head -n 1 | cut -d\" -f2 | cut -d. -f1)
              if [ "$version" = "21" ]; then
                return 0
              fi
            fi
            return 1
          }

          # Try different methods to find Java 21
          JAVA21_HOME=""

          # Method 1: Check if current JAVA_HOME is Java 21
          if check_java_version "$JAVA_HOME"; then
            JAVA21_HOME="$JAVA_HOME"
            echo "‚úÖ Using current JAVA_HOME: $JAVA_HOME"

          # Method 2: macOS - use java_home utility
          elif command -v /usr/libexec/java_home >/dev/null 2>&1; then
            if TEMP_JAVA_HOME=$(/usr/libexec/java_home -v 21 2>/dev/null); then
              if check_java_version "$TEMP_JAVA_HOME"; then
                JAVA21_HOME="$TEMP_JAVA_HOME"
                echo "‚úÖ Found Java 21 via macOS java_home: $JAVA21_HOME"
              fi
            fi

          # Method 3: Check common Java installation locations
          else
            for java_path in \
              "/usr/lib/jvm/java-21-openjdk" \
              "/usr/lib/jvm/java-21-oracle" \
              "/usr/lib/jvm/temurin-21-jdk" \
              "/opt/java/openjdk-21" \
              "/usr/java/jdk-21" \
              "/Library/Java/JavaVirtualMachines/*/Contents/Home" \
              "$HOME/.sdkman/candidates/java/21.*" \
              "$HOME/.jenv/versions/21.*"; do

              # Handle glob patterns
              for expanded_path in $java_path; do
                if check_java_version "$expanded_path"; then
                  JAVA21_HOME="$expanded_path"
                  echo "‚úÖ Found Java 21 at: $JAVA21_HOME"
                  break 2
                fi
              done
            done
          fi

          # If Java 21 not found, provide helpful error message
          if [ -z "$JAVA21_HOME" ]; then
            echo "‚ùå ERROR: Java 21 is required for code quality checks but was not found."
            echo ""
            echo "üìã Please install Java 21 using one of these methods:"
            echo ""
            echo "üçé macOS:"
            echo "   brew install openjdk@21"
            echo "   # or download from: https://adoptium.net/temurin/releases/"
            echo ""
            echo "üêß Linux (Ubuntu/Debian):"
            echo "   sudo apt update && sudo apt install openjdk-21-jdk"
            echo ""
            echo "üêß Linux (RHEL/CentOS):"
            echo "   sudo yum install java-21-openjdk-devel"
            echo ""
            echo "ü™ü Windows:"
            echo "   Download from: https://adoptium.net/temurin/releases/"
            echo "   Or use: winget install EclipseFoundation.Temurin.21.JDK"
            echo ""
            echo "üîß Alternative: Use SDKMAN (cross-platform):"
            echo "   curl -s \"https://get.sdkman.io\" | bash"
            echo "   source ~/.sdkman/bin/sdkman-init.sh"
            echo "   sdk install java 21-tem"
            echo ""
            echo "üí° After installation, ensure Java 21 is in your PATH or set JAVA_HOME"
            echo "   Example: export JAVA_HOME=/path/to/java-21"
            echo ""
            echo "üö´ To bypass this check temporarily: git push --no-verify"
            exit 1
          fi

          # Set JAVA_HOME and run quality checks
          export JAVA_HOME="$JAVA21_HOME"
          echo "üöÄ Running code quality checks with Java 21..."
          ./gradlew checkstyleMain checkstyleTest pmdMain pmdTest --no-daemon
        language: system
        files: \.java$
        pass_filenames: false
        stages: [pre-push]

# Optional: Configure specific file patterns to exclude
exclude: |
  (?x)^(
    .*\.min\.js|
    .*\.min\.css|
    .*/migrations/.*|
    .*/build/.*|
    .*/target/.*|
    .*/node_modules/.*|
    .*/vendor/.*
  )$
